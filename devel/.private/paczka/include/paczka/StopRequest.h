// Generated by gencpp from file paczka/StopRequest.msg
// DO NOT EDIT!


#ifndef PACZKA_MESSAGE_STOPREQUEST_H
#define PACZKA_MESSAGE_STOPREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace paczka
{
template <class ContainerAllocator>
struct StopRequest_
{
  typedef StopRequest_<ContainerAllocator> Type;

  StopRequest_()
    : a(0.0)  {
    }
  StopRequest_(const ContainerAllocator& _alloc)
    : a(0.0)  {
  (void)_alloc;
    }



   typedef float _a_type;
  _a_type a;





  typedef boost::shared_ptr< ::paczka::StopRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::paczka::StopRequest_<ContainerAllocator> const> ConstPtr;

}; // struct StopRequest_

typedef ::paczka::StopRequest_<std::allocator<void> > StopRequest;

typedef boost::shared_ptr< ::paczka::StopRequest > StopRequestPtr;
typedef boost::shared_ptr< ::paczka::StopRequest const> StopRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::paczka::StopRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::paczka::StopRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::paczka::StopRequest_<ContainerAllocator1> & lhs, const ::paczka::StopRequest_<ContainerAllocator2> & rhs)
{
  return lhs.a == rhs.a;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::paczka::StopRequest_<ContainerAllocator1> & lhs, const ::paczka::StopRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace paczka

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::paczka::StopRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::paczka::StopRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::paczka::StopRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::paczka::StopRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::paczka::StopRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::paczka::StopRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::paczka::StopRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3a9a8ccf1ae2be3477477819c0d93b4e";
  }

  static const char* value(const ::paczka::StopRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3a9a8ccf1ae2be34ULL;
  static const uint64_t static_value2 = 0x77477819c0d93b4eULL;
};

template<class ContainerAllocator>
struct DataType< ::paczka::StopRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "paczka/StopRequest";
  }

  static const char* value(const ::paczka::StopRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::paczka::StopRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 a\n"
;
  }

  static const char* value(const ::paczka::StopRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::paczka::StopRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.a);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct StopRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::paczka::StopRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::paczka::StopRequest_<ContainerAllocator>& v)
  {
    s << indent << "a: ";
    Printer<float>::stream(s, indent + "  ", v.a);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PACZKA_MESSAGE_STOPREQUEST_H
